diff --git a/node_modules/web3-provider-engine/index.js b/node_modules/web3-provider-engine/index.js
index 03690c9..faa2f36 100644
--- a/node_modules/web3-provider-engine/index.js
+++ b/node_modules/web3-provider-engine/index.js
@@ -71,6 +71,18 @@ Web3ProviderEngine.prototype.addProvider = function(source){
   source.setEngine(this)
 }
 
+Web3ProviderEngine.prototype.removeProviderByIndex = function(index){
+  const self = this
+  var provider = self._providers.splice(index, 1)
+  provider[0] = null;
+}
+
+Web3ProviderEngine.prototype.getProviderByIndex = function(index){
+  const self = this
+  var provider = self._providers[index]
+  return provider
+}
+
 Web3ProviderEngine.prototype.send = function(payload){
   throw new Error('Web3ProviderEngine does not support synchronous requests.')
 }
diff --git a/node_modules/web3-provider-engine/subproviders/hooked-wallet.js b/node_modules/web3-provider-engine/subproviders/hooked-wallet.js
index d9208ce..7fe5e4b 100644
--- a/node_modules/web3-provider-engine/subproviders/hooked-wallet.js
+++ b/node_modules/web3-provider-engine/subproviders/hooked-wallet.js
@@ -62,6 +62,8 @@ function HookedWalletSubprovider(opts){
   if (opts.processMessage) self.processMessage = opts.processMessage
   if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage
   if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage
+  if (opts.processTypedMessageV3) self.processTypedMessageV3 = opts.processTypedMessageV3
+  if (opts.processTypedMessageV4) self.processTypedMessageV4 = opts.processTypedMessageV4
   // approval hooks
   self.approveTransaction = opts.approveTransaction || self.autoApprove
   self.approveMessage = opts.approveMessage || self.autoApprove
@@ -72,11 +74,17 @@ function HookedWalletSubprovider(opts){
   if (opts.signMessage) self.signMessage = opts.signMessage  || mustProvideInConstructor('signMessage')
   if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage  || mustProvideInConstructor('signPersonalMessage')
   if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage  || mustProvideInConstructor('signTypedMessage')
+  if (opts.signTypedMessageV3) self.signTypedMessageV3 = opts.signTypedMessageV3  || mustProvideInConstructor('signTypedMessageV3')
+  if (opts.signTypedMessageV4) self.signTypedMessageV4 = opts.signTypedMessageV4  || mustProvideInConstructor('signTypedMessageV4')
   if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature
   // publish to network
   if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction
+  if (opts.getTransactionByHash) self.getTransactionByHash = opts.getTransactionByHash
   // calls
   if (opts.ethCall) self.ethCall = opts.ethCall
+  if (opts.estimateGas) self.estimateGas = opts.estimateGas
+  if (opts.getBlockByNumber) self.getBlockByNumber = opts.getBlockByNumber
+  if (opts.getTransactionReceipt) self.getTransactionReceipt = opts.getTransactionReceipt
   // EIP3085 
   if (opts.walletAddEthereumChain) self.walletAddEthereumChain = opts.walletAddEthereumChain
   // EIP3326
@@ -92,7 +100,6 @@ HookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){
   // sp we cant repeat var declarations
   let txParams, msgParams, extraParams
   let message, address
-
   switch(payload.method) {
 
     case 'eth_coinbase':
@@ -112,14 +119,6 @@ HookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){
       })
       return
 
-    case 'eth_call':
-      txParams = payload.params[0]
-      txParams.chainType = "ETH"
-      waterfall([
-        (cb) => self.ethCall(txParams, cb),
-      ], end)
-      return
-
     case 'wallet_addEthereumChain':
       txParams = payload.params[0]
       txParams.chainType = "ETH"
@@ -226,7 +225,55 @@ HookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){
       return
 
     case 'eth_signTypedData':
+      return (function(){
+        // process normally
+
+        const first = payload.params[0]
+        const second = payload.params[1]
+
+        if (resemblesAddress(first)) {
+          address = first
+          message = second
+        } else {
+          message = first
+          address = second
+        }
+
+        extraParams = payload.params[2] || {}
+        msgParams = extend(extraParams, {
+          from: address,
+          data: message,
+        })
+        waterfall([
+          (cb) => self.validateTypedMessage(msgParams, cb),
+          (cb) => self.processTypedMessage(msgParams, cb),
+        ], end)
+      })()
     case 'eth_signTypedData_v3':
+      return (function(){
+        // process normally
+
+        const first = payload.params[0]
+        const second = payload.params[1]
+
+        if (resemblesAddress(first)) {
+          address = first
+          message = second
+        } else {
+          message = first
+          address = second
+        }
+
+        extraParams = payload.params[2] || {}
+        msgParams = extend(extraParams, {
+          from: address,
+          data: message,
+        })
+        waterfall([
+          (cb) => self.validateTypedMessage(msgParams, cb),
+          (cb) => self.processTypedMessageV3(msgParams, cb),
+        ], end)
+      })()
     case 'eth_signTypedData_v4':
       return (function(){
         // process normally
@@ -249,7 +296,7 @@ HookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){
         })
         waterfall([
           (cb) => self.validateTypedMessage(msgParams, cb),
-          (cb) => self.processTypedMessage(msgParams, cb),
+          (cb) => self.processTypedMessageV4(msgParams, cb),
         ], end)
       })()
 
@@ -365,6 +412,7 @@ HookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){
       return  
 
     default:
+      console.log(`payload method: ${payload.method} not support, go to next(): ${JSON.stringify(next)};`)
       next()
       return
 
@@ -430,6 +478,24 @@ HookedWalletSubprovider.prototype.processTypedMessage = function(msgParams, cb)
   ], cb)
 }
 
+HookedWalletSubprovider.prototype.processTypedMessageV3 = function(msgParams, cb) {
+  const self = this
+  waterfall([
+    (cb) => self.approveTypedMessage(msgParams, cb),
+    (didApprove, cb) => self.checkApproval('message', didApprove, cb),
+    (cb) => self.signTypedMessageV3(msgParams, cb),
+  ], cb)
+}
+
+HookedWalletSubprovider.prototype.processTypedMessageV4 = function(msgParams, cb) {
+  const self = this
+  waterfall([
+    (cb) => self.approveTypedMessage(msgParams, cb),
+    (didApprove, cb) => self.checkApproval('message', didApprove, cb),
+    (cb) => self.signTypedMessageV4(msgParams, cb),
+  ], cb)
+}
+
 //
 // approval
 //
diff --git a/node_modules/web3-provider-engine/subproviders/rpc.js b/node_modules/web3-provider-engine/subproviders/rpc.js
index a41ee00..d4b77a1 100644
--- a/node_modules/web3-provider-engine/subproviders/rpc.js
+++ b/node_modules/web3-provider-engine/subproviders/rpc.js
@@ -62,3 +62,9 @@ RpcSource.prototype.handleRequest = function(payload, next, end){
   })
 
 }
+
+
+RpcSource.prototype.updateRpc = function (newRpc) {
+  const self = this
+  self.rpcUrl = newRpc
+}
\ No newline at end of file
